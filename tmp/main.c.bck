#include "minimote/server/minimote_server.h"
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#include "adt/hash/hash.h"
#include "commons/utils/byte_utils.h"
#include "adt/list/list.h"
#include <time.h>

static void * start_udp_server(void *arg) {
    minimote_server * server = (minimote_server *) arg;
    minimote_server_start_udp(server);

    return NULL;
}

static void * start_tcp_server(void *arg) {
    minimote_server * server = (minimote_server *) arg;
    minimote_server_start_tcp(server);

    return NULL;
}


static void node_appender(list_node *n, int i, void *arg) {

}

static void node_printer(list_node *n, void *arg) {
    int *val = n->data;
    printf("%d |", *val);
}

static void node_printer_i(list_node *n, int index, void *arg) {
    int *val = n->data;
    printf("(%d) = %d |", index, *val);
}

static uint32 hasher_int(void *data) {
    int *hashed = (int*) data;
    // printf("Hashing => %d\n", *hashed);
    return *hashed;
}

static bool equaler_int(void *k1, void *k2) {
    // printf("Comparing %d =? %d\n", *(int *) k1, *(int *) k2);
    return *(int *) k1 == *(int *) k2;
}

static void hash_node_printer(hash_node *node) {
    int *k = node->key;
    int *v = node->value;
    printf("K = %d | V = %d\n", *k, *v);
}

#define N 1000000
#define C 15

static void f() {
    int i = 0;
    i++;
    // printf("f(): %d\n", i);
}

static void f2() {
    int i = 0;
    i++;
    printf("f(): %d\n", i);
}

int main(int argc, char *argv[]) {
    clock_t start, end;

    hash h;
    hash_init(&h, 32, hasher_int, equaler_int);

    for (int i = 0; i < C; i++) {
        int *x = malloc(sizeof(int));
        *x = i;
        void (*fun)() = (void (*)()) f;
        hash_put(&h, x, *fun);
    }

    start = clock();

    for (int i = 0; i < N; i++) {
        int c = i % C;
        void (*fun)() = (void (*)()) hash_get(&h, &c);
        fun();
    }

    end = clock();

    printf("Elapsed clock time HASH: %lu us\n", (end - start));

    GHashTable *h = g_hash_

    start = clock();

    for (int i = 0; i < N; i++) {
        int c = i % C;
        switch (c) {
            case 0: f(); break;
            case 1: f(); break;
            case 2: f(); break;
            case 3: f(); break;
            case 4: f(); break;
            case 5: f(); break;
            case 6: f(); break;
            case 7: f(); break;
            case 8: f(); break;
            case 9: f(); break;
            case 10: f(); break;
            case 11: f(); break;
            case 12: f(); break;
            case 13: f(); break;
            case 14: f(); break;
            case 15: f(); break;
            case 16: f(); break;
            case 17: f(); break;
            case 18: f(); break;
            case 19: f(); break;
            case 20: f(); break;
            case 21: f(); break;
            case 22: f(); break;
            case 23: f(); break;
            default: f();
        }
    }

    end = clock();

    printf("Elapsed clock time SWITCH: %lu us\n", (end - start));


//    int i = 0;
//    void (*fun)() = f;

//    hash_put(&h, &i, *fun);
//    void * data = hash_get(&h, &i);
//    if (data) {
//        printf("Valid data\n");
//        printf("Sizeof data: %lu\n", sizeof(data));
//        void (*datafun)() = (void (*)()) data;
//        datafun();
//    } else {
//        printf("Data is null? %p\n", data);
//    }

//    void (*fun)() = f;
//    for (ulong j = 0; j < sizeof(fun); j++)
//            printf("%.2x | ", ((unsigned char *) &fun)[j]);
////    fun = f2;
//    printf("\n");
////    for (ulong j = 0; j < sizeof(fun); j++)
////            printf("%.2x | ", ((unsigned char *) &fun)[j]);
//
//    void * any = fun;
//    for (ulong j = 0; j < sizeof(any); j++)
//        printf("%.2x | ", ((unsigned char *) &any)[j]);
//
//    void (*anyfun)() = (void (*)()) any;
//    anyfun();
//
//    for (int i = 0; i < C; i++) {
//        int *x = malloc(sizeof(int));
//        *x = i;
//        void (*fun)() = f;
//        printf("f: %p\n", f);
//        printf("&f: %p\n", &f);
//        printf("fun: %p\n", fun);
//        printf("&fun: %p\n", &fun);
//
//        for (int j=0; j < sizeof(fun); j++)
//            printf("%.2x", ((unsigned char *) &fun)[j]);
//        printf("\n");
//
//        hash_put(&h, x, fun);
//    }
//
//    for (int i = 0; i < N; i++) {
//        int c = i % C;
//        void (*fun)() = (void (*)()) hash_get(&h, &c);
//        printf("Got *fun() %p\n", *fun);
//        printf("Got fun() %p\n", fun);
//        printf("Got &fun() %p\n", &fun);
//        if (fun) {
//            printf("Got valid fun()\n");
//            (*fun)();
//        } else {
//            printf("Got invalid fun()\n");
//        }
//    }


//    hash h;
//    hash_init(&h, 32, hasher_int, equaler_int);
//
////    for (int i = 0; i < 50; i++) {
////        int *k = malloc(sizeof(int));
////        int *v = malloc(sizeof(char));
////        *k = i;
////        *v = '0' + i;
////        hash_put(&h, k, v);
////    }
//
//    int *a_k = malloc(sizeof(int));
//    int *b_k = malloc(sizeof(int));
//    int *a_v = malloc(sizeof(int));
//    int *b_v = malloc(sizeof(int));
//
//    *a_k = 12;
//    *a_v = 1012;
//    *b_k = 13;
//    *b_v = 1013;
//
//    hash_put(&h, a_k, a_v);
//    hash_put(&h, b_k, b_v);
//
//    hash_foreach(&h, hash_node_printer);

//    list l;
//    list_init(&l);
//
//    for (int i = 0; i < 10; i++) {
//        int *x = malloc(sizeof(int));
//        *x = i;
//        list_append(&l, x);
//    }
//
//    list_foreach(&l, node_printer, NULL);
//
//    for (int i = 0; i < 5; i++) {
//        int *x = malloc(sizeof(int));
//        *x = -i;
//        list_prepend(&l, x);
//    }
//
//    printf("\n");
//
//    list_foreach_i(&l, node_printer_i, NULL);


//    minimote_server server;
//    minimote_server_init(&server, 50500, 50500);
//
//    pthread_t thread_udp, thread_tcp;
//
//    if (pthread_create(&thread_udp, NULL, start_udp_server, &server) != 0) {
//        fprintf(stderr, "Thread creation failed\n");
//        exit(-1);
//    }
//
//    if (pthread_create(&thread_tcp, NULL, start_tcp_server, &server) != 0) {
//        fprintf(stderr, "Thread creation failed\n");
//        exit(-1);
//    }
//
//    pthread_join(thread_udp, NULL);
//    pthread_join(thread_tcp, NULL);
}